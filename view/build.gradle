apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion versions.application.targetSdk
    buildToolsVersion versions.application.buildTools

    defaultConfig {
        applicationId "com.senyk.volodymyr.bloknot"
        minSdkVersion versions.application.minSdk
        targetSdkVersion versions.application.targetSdk
        versionName "$versions.application.versionName (${getVersion()})"
        versionCode versions.application.versionCode

        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('../keystore/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            storeFile file(getKeystoreProperty('releaseStoreFile'))
            storePassword getKeystoreProperty('releaseStorePassword')
            keyAlias getKeystoreProperty('releaseKeyAlias')
            keyPassword getKeystoreProperty('releaseKeyPassword')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

String getKeystoreProperty(String propertyName) {
    def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    if (keystoreProperties.containsKey(propertyName)) {
        return keystoreProperties[propertyName]
    } else if (System.getenv(propertyName) != null) {
        return System.getenv(propertyName)
    } else {
        throw new IllegalStateException("Keystore property not found: $propertyName")
    }
}

dependencies {
    // modules
    implementation project(":viewmodel")
    implementation project(":model")

    // view
    implementation "androidx.appcompat:appcompat:$versions.view.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.view.constraint"
    implementation "com.google.android.material:material:$versions.view.material"

    // di
    implementation "com.google.dagger:dagger:$versions.di.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.di.dagger"

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation.arch_component"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation.arch_component"

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"

    // persistence
    implementation "android.arch.persistence.room:runtime:$versions.persistence.room"
    implementation "android.arch.persistence.room:rxjava2:$versions.persistence.room"
    annotationProcessor "android.arch.persistence.room:compiler:$versions.persistence.room"

    // rx
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rx.android"
    implementation "io.reactivex.rxjava2:rxjava:$versions.rx.java"

    // frameworks
    implementation "com.hannesdorfmann:adapterdelegates4:$versions.frameworks.adapterdelegates"
}
